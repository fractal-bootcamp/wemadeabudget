// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Flag {
  NONE
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
}

enum AccountType {
  CHECKING
  CASH
  CREDIT_CARD
  SAVINGS
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields
  email    String @unique
  username String @unique
  clerkId  String @unique

  // Relations
  transactions Transaction[]
  payees       Payee[]
  categories   Category[]
  accounts     Account[]
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields
  date       DateTime
  cents      Int
  memo       String
  cleared    Boolean
  transfer   Boolean  @default(false)
  flag       Flag
  userId     String
  categoryId String
  accountId  String
  payeeId    String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  payee    Payee    @relation(fields: [payeeId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields
  name      String
  allocated Int     @default(0)
  permanent Boolean @default(false)
  userId    String

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique(name: "categoryId", fields: [userId, name])
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields
  name   String
  type   AccountType
  userId String

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique(name: "accountId", fields: [userId, name])
}

model Payee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields
  name            String
  userId          String
  accountTransfer Boolean @default(false)

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique(name: "payeeId", fields: [userId, name])
}

// model CategoryGroup {
//   id         String     @id @default(cuid())
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
//   name       String
//   categories Category[]
// }
